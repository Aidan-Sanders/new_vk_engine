#version 460

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout (set = 0, binding = 0, rgba16) uniform writeonly image2D out_frame;

layout (set = 0, binding = 1, rgba16) uniform readonly image3D cloudtex;

layout (set = 0, binding = 2) uniform readonly EXTENT
{
    vec2 value;
} extent;

layout (set = 0, binding = 3) uniform readonly CAMERA
{
    vec3 pos;
    vec3 dir;
    vec3 up;
    float fov;
} camera;

void main()
{
    uint x = 8 * gl_WorkGroupID.x + gl_LocalInvocationID.x;
    uint y = 8 * gl_WorkGroupID.y + gl_LocalInvocationID.y;

    vec2 res = vec2(8 * gl_NumWorkGroups.x, 8 * gl_NumWorkGroups.y);

    vec3 o = camera.pos;
    vec3 d = camera.dir;

    vec3 left = normalize(cross(camera.up, d));
    vec3 up = normalize(cross(d, left));

    float ux = float(x) / res.x * extent.value.x;
    float uy = float(y) / res.y * extent.value.y;

    float h = tan(radians(camera.fov) / 2);
    vec3 upperleft = (o + res.y / 2 / h * d) + left * extent.value.x / 2 + up * extent.value.y / 2;
    vec3 r = upperleft - left * ux - up * uy - o;

    vec4 color = vec4(1.f);
    // imageStore(out_frame, ivec2(x, y), color);
}